
on:Rust
  # Triggers the workflow on push or pull request events but only for the "master" branch
  # Customize trigger events based on your DevSecOps processes.
  push:
    branches: [ "vyper" ]
  pull_request:
    branches: [ "labels" ]
  schedule:
    - cron: '16 22 * * 1'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


permissions:
  contents: read

jobs:

  Trigger_APIsec_scan:
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
name: Deploy Solana Contract

on:
  push:
    branches:
      - main  # Trigger workflow on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Setup Rust toolchain
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true

    # Step 3: Install Solana CLI
    - name: Install Solana CLI
      run: |
        curl -sSfL https://release.solana.com/v1.10.32/install | sh
        echo "${HOME}/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        solana --version

    # Step 4: Configure Solana CLI
    - name: Setup Solana CLI
      env:
        SOLANA_CLUSTER: ${{ secrets.SOLANA_CLUSTER }}
        SOLANA_KEYPAIR: ${{ secrets.SOLANA_KEYPAIR }}
      run: |
        # Authenticate Solana CLI using the provided keypair
        echo "${SOLANA_KEYPAIR}" > /tmp/solana-keypair.json
        export SOLANA_KEYPAIR="/tmp/solana-keypair.json"
        solana config set --url $SOLANA_CLUSTER
        solana config set --keypair $SOLANA_KEYPAIR

    # Step 5: Build the Solana program
    - name: Build Solana program
      run: cargo build-bpf --manifest-path=program/Cargo.toml --bpf-out-dir=dist/program

    # Step 6: Deploy the program to Solana
    - name: Deploy to Solana
      run: |
        solana program deploy dist/program/my_program.so
    steps:
       - name: APIsec scan
         uses: apisec-inc/apisec-run-scan@025432089674a28ba8fb55f8ab06c10215e772ea
         with:
          # The APIsec username with which the scans will be executed
          apisec-username: ${{ secrets.apisec_username }}
          # The Password of the APIsec user with which the scans will be executed
          apisec-password: ${{ secrets.apisec_password}}
          # The name of the project for security scan
          apisec-project: "VAmPI"
          # The name of the sarif format result file The file is written only if this property is provided.
          sarif-result-file: "apisec-results.sarif"
       - name: Import results
         uses: github/codeql-action/upload-sarif@v3
         with:
          sarif_file: ./apisec-results.sarif
